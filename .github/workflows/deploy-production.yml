name: Deploy to Production

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://sora2.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all tests
        run: pnpm test:all
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          REDIS_URL: ${{ secrets.TEST_REDIS_URL }}
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}
          NODE_ENV: test

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}

      - name: Create backup
        run: |
          echo "Creating database backup..."
          # Add backup commands here
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy to production server
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # Example for Docker:
          # docker build -t sora2-web:${{ github.sha }} ./apps/web
          # docker build -t sora2-api:${{ github.sha }} ./apps/api
          # docker push sora2-web:${{ github.sha }}
          # docker push sora2-api:${{ github.sha }}

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Health check
        run: |
          echo "Checking deployment health..."
          sleep 30
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback commands here

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            apps/web/.next/**
            apps/api/dist/**
          generate_release_notes: true

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          text: 'üöÄ Production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: '‚ùå Production deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
