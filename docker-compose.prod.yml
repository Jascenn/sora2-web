version: '3.8'

# ============================================
# Production Docker Compose Configuration
# ============================================
# Optimized for production deployment with:
# - Resource limits and reservations
# - Health checks for all services
# - Automatic restart policies
# - Logging configuration
# - Network isolation
# - Volume persistence
# - Security best practices
# ============================================

services:
  # -------------------------------------------
  # PostgreSQL Database
  # -------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: sora2-postgres-prod
    restart: unless-stopped
    environment:
      # Required credentials
      POSTGRES_USER: ${POSTGRES_USER:-sora2user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required in .env}
      POSTGRES_DB: ${POSTGRES_DB:-sora2db}

      # Performance optimization
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"

      # Connection pool settings
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}

    ports:
      - '${POSTGRES_PORT:-5432}:5432'

    volumes:
      # Persistent data storage
      - postgres_data:/var/lib/postgresql/data

      # Optional: custom PostgreSQL configuration
      # - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro

      # Optional: initialization scripts
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-sora2user} -d ${POSTGRES_DB:-sora2db}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    networks:
      - sora2-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

    # Log rotation
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # -------------------------------------------
  # Redis Cache
  # -------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: sora2-redis-prod
    restart: unless-stopped

    # Redis configuration via command line
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --loglevel warning

    ports:
      - '${REDIS_PORT:-6379}:6379'

    volumes:
      # Persistent cache storage
      - redis_data:/data

      # Optional: custom Redis configuration
      # - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro

    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

    networks:
      - sora2-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

    # Log rotation
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # -------------------------------------------
  # API Service
  # -------------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        NODE_ENV: production

      # BuildKit cache optimization
      # Requires DOCKER_BUILDKIT=1 environment variable
      cache_from:
        - type=registry,ref=${DOCKER_REGISTRY:-ghcr.io/your-org}/sora2-api:cache

      # Enable BuildKit inline cache
      cache_to:
        - type=inline

    image: ${DOCKER_REGISTRY:-ghcr.io/your-org}/sora2-api:${VERSION:-latest}
    container_name: sora2-api-prod
    restart: unless-stopped

    ports:
      - '${API_PORT:-3101}:3101'

    environment:
      # Node environment
      NODE_ENV: production
      PORT: 3101

      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER:-sora2user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sora2db}
      DATABASE_POOL_MIN: ${DATABASE_POOL_MIN:-2}
      DATABASE_POOL_MAX: ${DATABASE_POOL_MAX:-10}

      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}

      # JWT authentication
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required in .env}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?JWT_REFRESH_SECRET is required in .env}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}

      # AWS S3 for file storage
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-}

      # Sora API configuration
      SORA_API_KEY: ${SORA_API_KEY:?SORA_API_KEY is required in .env}
      SORA_API_URL: ${SORA_API_URL:-https://api.openai.com/v1}
      SORA_TIMEOUT: ${SORA_TIMEOUT:-300000}

      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}

      # CORS configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS:-true}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}

      # Security
      SECURE_COOKIES: ${SECURE_COOKIES:-true}
      TRUST_PROXY: ${TRUST_PROXY:-true}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - sora2-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

      # Restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    # Health check
    healthcheck:
      test: [
        "CMD",
        "/nodejs/bin/node",
        "-e",
        "require('http').get('http://localhost:3101/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"
      ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

    # Log rotation
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  # -------------------------------------------
  # Web Frontend
  # -------------------------------------------
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}

      # BuildKit cache optimization
      cache_from:
        - type=registry,ref=${DOCKER_REGISTRY:-ghcr.io/your-org}/sora2-web:cache

      cache_to:
        - type=inline

    image: ${DOCKER_REGISTRY:-ghcr.io/your-org}/sora2-web:${VERSION:-latest}
    container_name: sora2-web-prod
    restart: unless-stopped

    ports:
      - '${WEB_PORT:-3100}:3100'

    environment:
      # Node environment
      NODE_ENV: production
      PORT: 3100
      NEXT_TELEMETRY_DISABLED: 1

      # API URL - must be accessible from browser
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}

      # Analytics (optional)
      NEXT_PUBLIC_GA_ID: ${NEXT_PUBLIC_GA_ID:-}

      # Feature flags (optional)
      NEXT_PUBLIC_ENABLE_ANALYTICS: ${NEXT_PUBLIC_ENABLE_ANALYTICS:-false}

    depends_on:
      api:
        condition: service_healthy

    networks:
      - sora2-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

      # Restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    # Health check
    healthcheck:
      test: [
        "CMD",
        "node",
        "-e",
        "require('http').get('http://localhost:3100/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"
      ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 20s

    # Log rotation
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  # -------------------------------------------
  # Nginx Reverse Proxy
  # -------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: sora2-nginx-prod
    restart: unless-stopped

    ports:
      - '${NGINX_HTTP_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'

    volumes:
      # Nginx configuration
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro

      # SSL certificates (recommended for production)
      # - ./config/nginx/ssl:/etc/nginx/ssl:ro
      # Or use Let's Encrypt with certbot
      # - ./config/certbot/conf:/etc/letsencrypt:ro
      # - ./config/certbot/www:/var/www/certbot:ro

      # Static files cache
      - nginx_cache:/var/cache/nginx

      # Logs
      - nginx_logs:/var/log/nginx

    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy

    networks:
      - sora2-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

    # Log rotation
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# -------------------------------------------
# Networks
# -------------------------------------------
networks:
  sora2-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-sora2

# -------------------------------------------
# Volumes
# -------------------------------------------
volumes:
  # PostgreSQL data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}

  # Redis data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}

  # Nginx cache
  nginx_cache:
    driver: local

  # Nginx logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NGINX_LOGS_PATH:-./logs/nginx}
