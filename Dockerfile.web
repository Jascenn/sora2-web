# ============================================
# Optimized Multi-stage Dockerfile for Next.js Web
# ============================================
# Build optimizations:
# - Next.js standalone output reduces image size by 80%+
# - Multi-stage build with pnpm cache optimization
# - Optimized layer caching for fast rebuilds
# - Proper static asset handling with CDN-ready headers
# - HEALTHCHECK for orchestration support
# ============================================

# -------------------------------------------
# Stage 1: Dependencies
# Purpose: Install dependencies with optimal caching
# -------------------------------------------
FROM node:18-alpine AS deps

# Install system dependencies
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Enable pnpm via corepack
RUN corepack enable && corepack prepare pnpm@10.18.2 --activate

# Copy only package files for maximum cache efficiency
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
COPY packages/database/package.json ./packages/database/

# Configure pnpm store
RUN pnpm config set store-dir /root/.pnpm-store

# Install all dependencies with cache mount
# Next.js build requires devDependencies
RUN --mount=type=cache,id=pnpm-store,target=/root/.pnpm-store \
    pnpm install --frozen-lockfile

# -------------------------------------------
# Stage 2: Builder
# Purpose: Build Next.js application
# -------------------------------------------
FROM node:18-alpine AS builder

WORKDIR /app

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@10.18.2 --activate
RUN pnpm config set store-dir /root/.pnpm-store

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules
COPY --from=deps /app/packages ./packages

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/

# Copy shared packages
COPY packages/database ./packages/database

# Copy web app source
COPY apps/web ./apps/web

# Build arguments for runtime configuration
ARG NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# Disable Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Set production mode
ENV NODE_ENV=production

# Build Next.js with standalone output
# Standalone output includes only necessary dependencies
# This reduces image size by 80% compared to full node_modules
RUN pnpm --filter @sora2/web build

# -------------------------------------------
# Stage 3: Runtime
# Purpose: Minimal production runtime
# -------------------------------------------
FROM node:18-alpine AS runner

WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3100

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy Next.js standalone output
# The standalone output includes only what's needed to run
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./

# Copy static assets
# These are served directly by Next.js with proper cache headers
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public

# Switch to non-root user
USER nextjs

# Expose web port
EXPOSE 3100

# Health check for container orchestration
# Checks Next.js health endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=15s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3100/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

# Start Next.js server
# The standalone build creates a self-contained server.js
CMD ["node", "apps/web/server.js"]
